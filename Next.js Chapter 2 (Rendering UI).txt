Next js ....................................CHAPTER 2(Rendering user interfaces)

Notes..............................

1) How browsers interpret your code to create (or render) user interfaces (UI).
Ans: 
first step:  When a user visits a web page, the server returns an HTML file to the browser
second step: The browser then reads the HTML and constructs the Document Object Model (DOM).
Third step:  Then from DOM, user interface will be rendered.

2) What is DOM?/
Ans: 
The DOM is an object representation of the HTML elements. It acts as a bridge between your code and the user interface, and
has a tree-like structure with parent and child relationships.

HTML=======DOM========UI
1st        2nd        3rd

3) Manipulating Documents

Document manipulation is done by using  the Document Object Model (DOM), a set of APIs for controlling HTML and styling 
information that makes heavy use of the Document object.

what is document?/
=> The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's 
   content, which is the DOM tree.

What are the main parts of a browser directly involved in viewing web pages?/
Ans: Navigator, window and document

window: The window is the browser tab that a web page is loaded into; this is represented in JavaScript by the Window 
object. Using methods available on this object you can do things like return the window's size (see Window.innerWidth and 
Window.innerHeight), manipulate the document loaded into that window, store data specific to that document on the 
client-side (for example using a local database or other storage mechanism), attach an event handler to the current window,
and more.

navigator: The navigator represents the state and identity of the browser (i.e. the user-agent) as it exists on the web. 
In JavaScript, this is represented by the Navigator object. You can use this object to retrieve things like the user's 
preferred language, a media stream from the user's webcam, etc.

document: The document (represented by the DOM in browsers) is the actual page loaded into the window, and is represented 
in JavaScript by the Document object. You can use this object to return and manipulate information on the HTML and CSS that
comprises the document


4) Nodes are also referred to by their position in the tree relative to other nodes:

==Root node: The top node in the tree, which in the case of HTML is always the HTML node (other markup vocabularies like SVG 
  and custom XML will have different root elements).

==Child node: A node directly inside another node. For example, IMG is a child of SECTION in the above example.

==Descendant node: A node anywhere inside another node. For example, IMG is a child of SECTION in the above example, and it is also a descendant. IMG is not a child of 
  BODY, as it is two levels below it in the tree, but it is a descendant of BODY.

==Parent node: A node which has another node inside it. For example, BODY is the parent node of SECTION in the above example.

==Sibling nodes: Nodes that sit on the same level in the DOM tree. For example, IMG and P are siblings in the above example.
  It is useful to familiarize yourself with this terminology before working with the DOM, as a number of the code terms you'll come across make use of them. You may have 
  also come across them if you have studied CSS (e.g. descendant selector, child selector).


5) About DOM Manipulating
==Document.querySelector() is the recommended modern approach. It is convenient because it allows you to select elements using CSS selectors. 

==The above querySelector() call will match the first <a> element that appears in the document. If you wanted to match and do things to multiple elements, you could 
use Document.querySelectorAll(), which matches every element in the document that matches the selector, and stores references to them in an array-like object called a
NodeList.

==There are older methods available for grabbing element references, such as:

Document.getElementById(), which selects an element with a given id attribute value, e.g. <p id="myId">My paragraph</p>. The ID is passed to the function as a parameter
, i.e. const elementRef = document.getElementById('myId').

Document.getElementsByTagName(), which returns an array-like object containing all the elements on the page of a given type, for example <p>s, <a>s, etc. The element 
type is passed to the function as a parameter, i.e. const elementRefArray = document.getElementsByTagName('p').